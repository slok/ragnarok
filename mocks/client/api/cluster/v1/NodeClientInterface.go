// Code generated by mockery v1.0.0
package v1

import api "github.com/slok/ragnarok/api"

import mock "github.com/stretchr/testify/mock"
import v1 "github.com/slok/ragnarok/api/cluster/v1"
import watch "github.com/slok/ragnarok/apimachinery/watch"

// NodeClientInterface is an autogenerated mock type for the NodeClientInterface type
type NodeClientInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: node
func (_m *NodeClientInterface) Create(node *v1.Node) (*v1.Node, error) {
	ret := _m.Called(node)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(*v1.Node) *v1.Node); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Node) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *NodeClientInterface) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *NodeClientInterface) Get(id string) (*v1.Node, error) {
	ret := _m.Called(id)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(string) *v1.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: opts
func (_m *NodeClientInterface) List(opts api.ListOptions) ([]*v1.Node, error) {
	ret := _m.Called(opts)

	var r0 []*v1.Node
	if rf, ok := ret.Get(0).(func(api.ListOptions) []*v1.Node); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: node
func (_m *NodeClientInterface) Update(node *v1.Node) (*v1.Node, error) {
	ret := _m.Called(node)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(*v1.Node) *v1.Node); ok {
		r0 = rf(node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Node) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: opts
func (_m *NodeClientInterface) Watch(opts api.ListOptions) (watch.Watcher, error) {
	ret := _m.Called(opts)

	var r0 watch.Watcher
	if rf, ok := ret.Get(0).(func(api.ListOptions) watch.Watcher); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Watcher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
