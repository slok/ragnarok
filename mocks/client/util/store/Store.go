// Code generated by mockery v1.0.0
package store

import api "github.com/slok/ragnarok/api"
import mock "github.com/stretchr/testify/mock"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Add provides a mock function with given fields: obj
func (_m *Store) Add(obj api.Object) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.Object) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: obj
func (_m *Store) Delete(obj api.Object) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.Object) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: obj
func (_m *Store) Get(obj api.Object) (api.Object, bool, error) {
	ret := _m.Called(obj)

	var r0 api.Object
	if rf, ok := ret.Get(0).(func(api.Object) api.Object); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Object)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(api.Object) bool); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(api.Object) error); ok {
		r2 = rf(obj)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByKey provides a mock function with given fields: key
func (_m *Store) GetByKey(key string) (api.Object, bool, error) {
	ret := _m.Called(key)

	var r0 api.Object
	if rf, ok := ret.Get(0).(func(string) api.Object); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.Object)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: obj
func (_m *Store) Update(obj api.Object) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(api.Object) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
