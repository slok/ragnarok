// Code generated by mockery v1.0.0
package attack

import attack "github.com/slok/ragnarok/attack"
import mock "github.com/stretchr/testify/mock"

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// Deregister provides a mock function with given fields: id
func (_m *Registry) Deregister(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: id
func (_m *Registry) Exists(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// New provides a mock function with given fields: id, opts
func (_m *Registry) New(id string, opts attack.Opts) (attack.Attacker, error) {
	ret := _m.Called(id, opts)

	var r0 attack.Attacker
	if rf, ok := ret.Get(0).(func(string, attack.Opts) attack.Attacker); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attack.Attacker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, attack.Opts) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: id, c
func (_m *Registry) Register(id string, c attack.Creater) error {
	ret := _m.Called(id, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, attack.Creater) error); ok {
		r0 = rf(id, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
