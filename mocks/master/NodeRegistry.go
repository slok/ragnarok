// Code generated by mockery v1.0.0
package master

import master "github.com/slok/ragnarok/master"
import mock "github.com/stretchr/testify/mock"

// NodeRegistry is an autogenerated mock type for the NodeRegistry type
type NodeRegistry struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: id, node
func (_m *NodeRegistry) AddNode(id string, node *master.Node) error {
	ret := _m.Called(id, node)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *master.Node) error); ok {
		r0 = rf(id, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNode provides a mock function with given fields: id
func (_m *NodeRegistry) DeleteNode(id string) {
	_m.Called(id)
}

// GetNode provides a mock function with given fields: id
func (_m *NodeRegistry) GetNode(id string) (*master.Node, bool) {
	ret := _m.Called(id)

	var r0 *master.Node
	if rf, ok := ret.Get(0).(func(string) *master.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*master.Node)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *NodeRegistry) GetNodes() map[string]*master.Node {
	ret := _m.Called()

	var r0 map[string]*master.Node
	if rf, ok := ret.Get(0).(func() map[string]*master.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*master.Node)
		}
	}

	return r0
}
