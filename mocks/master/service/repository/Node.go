// Code generated by mockery v1.0.0
package service

import mock "github.com/stretchr/testify/mock"

import v1 "github.com/slok/ragnarok/api/cluster/v1"

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

// DeleteNode provides a mock function with given fields: id
func (_m *Node) DeleteNode(id string) {
	_m.Called(id)
}

// GetNode provides a mock function with given fields: id
func (_m *Node) GetNode(id string) (*v1.Node, bool) {
	ret := _m.Called(id)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(string) *v1.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *Node) GetNodes() map[string]*v1.Node {
	ret := _m.Called()

	var r0 map[string]*v1.Node
	if rf, ok := ret.Get(0).(func() map[string]*v1.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*v1.Node)
		}
	}

	return r0
}

// GetNodesByLabels provides a mock function with given fields: labels
func (_m *Node) GetNodesByLabels(labels v1.NodeLabels) map[string]*v1.Node {
	ret := _m.Called(labels)

	var r0 map[string]*v1.Node
	if rf, ok := ret.Get(0).(func(v1.NodeLabels) map[string]*v1.Node); ok {
		r0 = rf(labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*v1.Node)
		}
	}

	return r0
}

// StoreNode provides a mock function with given fields: id, node
func (_m *Node) StoreNode(id string, node v1.Node) error {
	ret := _m.Called(id, node)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, v1.Node) error); ok {
		r0 = rf(id, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
