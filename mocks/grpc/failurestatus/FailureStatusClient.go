// Code generated by mockery v1.0.0
package failurestatus

import context "golang.org/x/net/context"
import failure "github.com/slok/ragnarok/grpc/failurestatus"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// FailureStatusClient is an autogenerated mock type for the FailureStatusClient type
type FailureStatusClient struct {
	mock.Mock
}

// FailureStateList provides a mock function with given fields: ctx, in, opts
func (_m *FailureStatusClient) FailureStateList(ctx context.Context, in *failure.NodeId, opts ...grpc.CallOption) (failure.FailureStatus_FailureStateListClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 failure.FailureStatus_FailureStateListClient
	if rf, ok := ret.Get(0).(func(context.Context, *failure.NodeId, ...grpc.CallOption) failure.FailureStatus_FailureStateListClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(failure.FailureStatus_FailureStateListClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *failure.NodeId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFailure provides a mock function with given fields: ctx, in, opts
func (_m *FailureStatusClient) GetFailure(ctx context.Context, in *failure.FailureId, opts ...grpc.CallOption) (*failure.Failure, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *failure.Failure
	if rf, ok := ret.Get(0).(func(context.Context, *failure.FailureId, ...grpc.CallOption) *failure.Failure); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*failure.Failure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *failure.FailureId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
