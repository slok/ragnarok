// Code generated by mockery v1.0.0
package service

import failure "github.com/slok/ragnarok/failure"
import mock "github.com/stretchr/testify/mock"

// FailureStatusService is an autogenerated mock type for the FailureStatusService type
type FailureStatusService struct {
	mock.Mock
}

// GetFailure provides a mock function with given fields: id
func (_m *FailureStatusService) GetFailure(id string) (*failure.Failure, error) {
	ret := _m.Called(id)

	var r0 *failure.Failure
	if rf, ok := ret.Get(0).(func(string) *failure.Failure); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*failure.Failure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeExpectedDisabledFailures provides a mock function with given fields: nodeID
func (_m *FailureStatusService) GetNodeExpectedDisabledFailures(nodeID string) []*failure.Failure {
	ret := _m.Called(nodeID)

	var r0 []*failure.Failure
	if rf, ok := ret.Get(0).(func(string) []*failure.Failure); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*failure.Failure)
		}
	}

	return r0
}

// GetNodeExpectedEnabledFailures provides a mock function with given fields: nodeID
func (_m *FailureStatusService) GetNodeExpectedEnabledFailures(nodeID string) []*failure.Failure {
	ret := _m.Called(nodeID)

	var r0 []*failure.Failure
	if rf, ok := ret.Get(0).(func(string) []*failure.Failure); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*failure.Failure)
		}
	}

	return r0
}

// GetNodeFailures provides a mock function with given fields: nodeID
func (_m *FailureStatusService) GetNodeFailures(nodeID string) []*failure.Failure {
	ret := _m.Called(nodeID)

	var r0 []*failure.Failure
	if rf, ok := ret.Get(0).(func(string) []*failure.Failure); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*failure.Failure)
		}
	}

	return r0
}
