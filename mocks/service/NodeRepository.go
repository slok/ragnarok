// Code generated by mockery v1.0.0
package service

import mock "github.com/stretchr/testify/mock"
import model "github.com/slok/ragnarok/master/model"

// NodeRepository is an autogenerated mock type for the NodeRepository type
type NodeRepository struct {
	mock.Mock
}

// DeleteNode provides a mock function with given fields: id
func (_m *NodeRepository) DeleteNode(id string) {
	_m.Called(id)
}

// GetNode provides a mock function with given fields: id
func (_m *NodeRepository) GetNode(id string) (*model.Node, bool) {
	ret := _m.Called(id)

	var r0 *model.Node
	if rf, ok := ret.Get(0).(func(string) *model.Node); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Node)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *NodeRepository) GetNodes() map[string]*model.Node {
	ret := _m.Called()

	var r0 map[string]*model.Node
	if rf, ok := ret.Get(0).(func() map[string]*model.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Node)
		}
	}

	return r0
}

// StoreNode provides a mock function with given fields: id, node
func (_m *NodeRepository) StoreNode(id string, node *model.Node) error {
	ret := _m.Called(id, node)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.Node) error); ok {
		r0 = rf(id, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
