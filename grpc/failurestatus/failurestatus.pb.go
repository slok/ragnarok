// Code generated by protoc-gen-go. DO NOT EDIT.
// source: failurestatus/failurestatus.proto

/*
Package failure is a generated protocol buffer package.

It is generated from these files:
	failurestatus/failurestatus.proto

It has these top-level messages:
	NodeId
	FailureId
	Failure
	FailuresExpectedState
*/
package failure

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// State is the state a failure can be.
type State int32

const (
	State_UNKNOWN   State = 0
	State_ENABLED   State = 1
	State_REVERTING State = 2
	State_DISABLED  State = 3
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ENABLED",
	2: "REVERTING",
	3: "DISABLED",
}
var State_value = map[string]int32{
	"UNKNOWN":   0,
	"ENABLED":   1,
	"REVERTING": 2,
	"DISABLED":  3,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// NodeId is a node id.
type NodeId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NodeId) Reset()                    { *m = NodeId{} }
func (m *NodeId) String() string            { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()               {}
func (*NodeId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// FailureId is a failure id.
type FailureId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FailureId) Reset()                    { *m = FailureId{} }
func (m *FailureId) String() string            { return proto.CompactTextString(m) }
func (*FailureId) ProtoMessage()               {}
func (*FailureId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FailureId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Failure represents an failure.
type Failure struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NodeID        string `protobuf:"bytes,2,opt,name=nodeID" json:"nodeID,omitempty"`
	Definition    string `protobuf:"bytes,3,opt,name=definition" json:"definition,omitempty"`
	CurrentState  State  `protobuf:"varint,4,opt,name=current_state,json=currentState,enum=failure.State" json:"current_state,omitempty"`
	ExpectedState State  `protobuf:"varint,5,opt,name=expected_state,json=expectedState,enum=failure.State" json:"expected_state,omitempty"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Failure) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Failure) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Failure) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func (m *Failure) GetCurrentState() State {
	if m != nil {
		return m.CurrentState
	}
	return State_UNKNOWN
}

func (m *Failure) GetExpectedState() State {
	if m != nil {
		return m.ExpectedState
	}
	return State_UNKNOWN
}

// FailuresExpectedState reprensents the state of the failures.
type FailuresExpectedState struct {
	RunningFailureId  []string `protobuf:"bytes,1,rep,name=running_failure_id,json=runningFailureId" json:"running_failure_id,omitempty"`
	RevertedFailureId []string `protobuf:"bytes,2,rep,name=reverted_failure_id,json=revertedFailureId" json:"reverted_failure_id,omitempty"`
}

func (m *FailuresExpectedState) Reset()                    { *m = FailuresExpectedState{} }
func (m *FailuresExpectedState) String() string            { return proto.CompactTextString(m) }
func (*FailuresExpectedState) ProtoMessage()               {}
func (*FailuresExpectedState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FailuresExpectedState) GetRunningFailureId() []string {
	if m != nil {
		return m.RunningFailureId
	}
	return nil
}

func (m *FailuresExpectedState) GetRevertedFailureId() []string {
	if m != nil {
		return m.RevertedFailureId
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeId)(nil), "failure.NodeId")
	proto.RegisterType((*FailureId)(nil), "failure.FailureId")
	proto.RegisterType((*Failure)(nil), "failure.Failure")
	proto.RegisterType((*FailuresExpectedState)(nil), "failure.FailuresExpectedState")
	proto.RegisterEnum("failure.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FailureStatus service

type FailureStatusClient interface {
	// FailureStateList asks for a list of the failures that should begin, continue or stop.
	FailureStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (FailureStatus_FailureStateListClient, error)
	// GetFailure asks for a failure.
	GetFailure(ctx context.Context, in *FailureId, opts ...grpc.CallOption) (*Failure, error)
}

type failureStatusClient struct {
	cc *grpc.ClientConn
}

func NewFailureStatusClient(cc *grpc.ClientConn) FailureStatusClient {
	return &failureStatusClient{cc}
}

func (c *failureStatusClient) FailureStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (FailureStatus_FailureStateListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FailureStatus_serviceDesc.Streams[0], c.cc, "/failure.FailureStatus/FailureStateList", opts...)
	if err != nil {
		return nil, err
	}
	x := &failureStatusFailureStateListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FailureStatus_FailureStateListClient interface {
	Recv() (*FailuresExpectedState, error)
	grpc.ClientStream
}

type failureStatusFailureStateListClient struct {
	grpc.ClientStream
}

func (x *failureStatusFailureStateListClient) Recv() (*FailuresExpectedState, error) {
	m := new(FailuresExpectedState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *failureStatusClient) GetFailure(ctx context.Context, in *FailureId, opts ...grpc.CallOption) (*Failure, error) {
	out := new(Failure)
	err := grpc.Invoke(ctx, "/failure.FailureStatus/GetFailure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FailureStatus service

type FailureStatusServer interface {
	// FailureStateList asks for a list of the failures that should begin, continue or stop.
	FailureStateList(*NodeId, FailureStatus_FailureStateListServer) error
	// GetFailure asks for a failure.
	GetFailure(context.Context, *FailureId) (*Failure, error)
}

func RegisterFailureStatusServer(s *grpc.Server, srv FailureStatusServer) {
	s.RegisterService(&_FailureStatus_serviceDesc, srv)
}

func _FailureStatus_FailureStateList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FailureStatusServer).FailureStateList(m, &failureStatusFailureStateListServer{stream})
}

type FailureStatus_FailureStateListServer interface {
	Send(*FailuresExpectedState) error
	grpc.ServerStream
}

type failureStatusFailureStateListServer struct {
	grpc.ServerStream
}

func (x *failureStatusFailureStateListServer) Send(m *FailuresExpectedState) error {
	return x.ServerStream.SendMsg(m)
}

func _FailureStatus_GetFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FailureStatusServer).GetFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/failure.FailureStatus/GetFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FailureStatusServer).GetFailure(ctx, req.(*FailureId))
	}
	return interceptor(ctx, in, info, handler)
}

var _FailureStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "failure.FailureStatus",
	HandlerType: (*FailureStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFailure",
			Handler:    _FailureStatus_GetFailure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FailureStateList",
			Handler:       _FailureStatus_FailureStateList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "failurestatus/failurestatus.proto",
}

func init() { proto.RegisterFile("failurestatus/failurestatus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xdd, 0x4a, 0xeb, 0x40,
	0x14, 0x85, 0xcf, 0xa4, 0xa7, 0xed, 0xc9, 0x3e, 0x4d, 0x8c, 0x5b, 0x94, 0x50, 0xa1, 0xd4, 0x5e,
	0x15, 0x91, 0x28, 0x2d, 0xde, 0x0a, 0x4a, 0x63, 0x09, 0x96, 0x08, 0xa9, 0x3f, 0x97, 0xa5, 0x76,
	0xa6, 0x32, 0x20, 0x93, 0x32, 0x99, 0x88, 0xcf, 0xe0, 0x3b, 0xf9, 0x6e, 0x92, 0xc9, 0xb4, 0xc6,
	0xd2, 0xcb, 0xb5, 0xbe, 0x35, 0xfb, 0x27, 0x3b, 0x70, 0xb2, 0x9c, 0xf3, 0xb7, 0x5c, 0xb2, 0x4c,
	0xcd, 0x55, 0x9e, 0x9d, 0xff, 0x52, 0xc1, 0x4a, 0xa6, 0x2a, 0xc5, 0xa6, 0x31, 0x7b, 0x3e, 0x34,
	0xe2, 0x94, 0xb2, 0x88, 0xa2, 0x0b, 0x16, 0xa7, 0x3e, 0xe9, 0x92, 0xbe, 0x9d, 0x58, 0x9c, 0xf6,
	0x8e, 0xc1, 0xbe, 0x2d, 0x43, 0x3b, 0xe0, 0x17, 0x81, 0xa6, 0xa1, 0xdb, 0x0c, 0x8f, 0xa0, 0x21,
	0x8a, 0x92, 0x23, 0xdf, 0xd2, 0x9e, 0x51, 0xd8, 0x01, 0xa0, 0x6c, 0xc9, 0x05, 0x57, 0x3c, 0x15,
	0x7e, 0x4d, 0xb3, 0x8a, 0x83, 0x43, 0x70, 0x16, 0xb9, 0x94, 0x4c, 0xa8, 0x59, 0x31, 0x2b, 0xf3,
	0xff, 0x76, 0x49, 0xdf, 0x1d, 0xb8, 0x81, 0x99, 0x35, 0x98, 0x16, 0x6e, 0xd2, 0x32, 0x21, 0xad,
	0xf0, 0x12, 0x5c, 0xf6, 0xb1, 0x62, 0x0b, 0xc5, 0xa8, 0x79, 0x55, 0xdf, 0xf9, 0xca, 0x59, 0xa7,
	0xb4, 0xec, 0xe5, 0x70, 0x68, 0xc6, 0xcf, 0xc2, 0x2a, 0xc0, 0x33, 0x40, 0x99, 0x0b, 0xc1, 0xc5,
	0xeb, 0xcc, 0x14, 0x98, 0xe9, 0xe5, 0x6a, 0x7d, 0x3b, 0xf1, 0x0c, 0xf9, 0xf9, 0x2c, 0x01, 0x1c,
	0x48, 0xf6, 0xce, 0x64, 0xd1, 0xbd, 0x12, 0xb7, 0x74, 0x7c, 0x7f, 0x8d, 0x36, 0xf9, 0xd3, 0x2b,
	0xa8, 0x97, 0x6d, 0xfe, 0x43, 0xf3, 0x31, 0xbe, 0x8b, 0xef, 0x9f, 0x63, 0xef, 0x4f, 0x21, 0xc2,
	0xf8, 0xfa, 0x66, 0x12, 0x8e, 0x3c, 0x82, 0x0e, 0xd8, 0x49, 0xf8, 0x14, 0x26, 0x0f, 0x51, 0x3c,
	0xf6, 0x2c, 0x6c, 0xc1, 0xbf, 0x51, 0x34, 0x2d, 0x61, 0x6d, 0xf0, 0x49, 0xc0, 0x31, 0xd5, 0xa6,
	0xfa, 0x9c, 0x18, 0x82, 0x57, 0x31, 0xd8, 0x84, 0x67, 0x0a, 0xf7, 0x36, 0xbb, 0x97, 0xa7, 0x6d,
	0x77, 0x36, 0xc6, 0xce, 0xa5, 0x2f, 0x08, 0x0e, 0x00, 0xc6, 0x4c, 0xad, 0x2f, 0x8a, 0xdb, 0xf9,
	0x88, 0xb6, 0xbd, 0x6d, 0xef, 0xa5, 0xa1, 0x7f, 0xa5, 0xe1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0x12, 0x7d, 0xfb, 0x6f, 0x02, 0x00, 0x00,
}
