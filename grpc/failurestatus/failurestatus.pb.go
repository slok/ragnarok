// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: failurestatus/failurestatus.proto

/*
	Package failure is a generated protocol buffer package.

	It is generated from these files:
		failurestatus/failurestatus.proto

	It has these top-level messages:
		NodeId
		FailureId
		Failure
		FailuresState
*/
package failure

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// State is the state a failure can be.
type State int32

const (
	State_UNKNOWN           State = 0
	State_ENABLED           State = 1
	State_EXECUTING         State = 2
	State_REVERTING         State = 3
	State_DISABLED          State = 4
	State_ERRORED           State = 5
	State_ERRORED_REVERTING State = 6
	State_STALE             State = 7
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ENABLED",
	2: "EXECUTING",
	3: "REVERTING",
	4: "DISABLED",
	5: "ERRORED",
	6: "ERRORED_REVERTING",
	7: "STALE",
}
var State_value = map[string]int32{
	"UNKNOWN":           0,
	"ENABLED":           1,
	"EXECUTING":         2,
	"REVERTING":         3,
	"DISABLED":          4,
	"ERRORED":           5,
	"ERRORED_REVERTING": 6,
	"STALE":             7,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptorFailurestatus, []int{0} }

// NodeId is a node id.
type NodeId struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *NodeId) Reset()                    { *m = NodeId{} }
func (m *NodeId) String() string            { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()               {}
func (*NodeId) Descriptor() ([]byte, []int) { return fileDescriptorFailurestatus, []int{0} }

func (m *NodeId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// FailureId is a failure id.
type FailureId struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FailureId) Reset()                    { *m = FailureId{} }
func (m *FailureId) String() string            { return proto.CompactTextString(m) }
func (*FailureId) ProtoMessage()               {}
func (*FailureId) Descriptor() ([]byte, []int) { return fileDescriptorFailurestatus, []int{1} }

func (m *FailureId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Failure represents an failure.
type Failure struct {
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeID        string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Definition    string `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	CurrentState  State  `protobuf:"varint,4,opt,name=current_state,json=currentState,proto3,enum=failure.State" json:"current_state,omitempty"`
	ExpectedState State  `protobuf:"varint,5,opt,name=expected_state,json=expectedState,proto3,enum=failure.State" json:"expected_state,omitempty"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptorFailurestatus, []int{2} }

func (m *Failure) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Failure) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Failure) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func (m *Failure) GetCurrentState() State {
	if m != nil {
		return m.CurrentState
	}
	return State_UNKNOWN
}

func (m *Failure) GetExpectedState() State {
	if m != nil {
		return m.ExpectedState
	}
	return State_UNKNOWN
}

// FailuresExpectedState reprensents the state of the failures.
type FailuresState struct {
	Failures []*Failure `protobuf:"bytes,1,rep,name=failures" json:"failures,omitempty"`
}

func (m *FailuresState) Reset()                    { *m = FailuresState{} }
func (m *FailuresState) String() string            { return proto.CompactTextString(m) }
func (*FailuresState) ProtoMessage()               {}
func (*FailuresState) Descriptor() ([]byte, []int) { return fileDescriptorFailurestatus, []int{3} }

func (m *FailuresState) GetFailures() []*Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeId)(nil), "failure.NodeId")
	proto.RegisterType((*FailureId)(nil), "failure.FailureId")
	proto.RegisterType((*Failure)(nil), "failure.Failure")
	proto.RegisterType((*FailuresState)(nil), "failure.FailuresState")
	proto.RegisterEnum("failure.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FailureStatus service

type FailureStatusClient interface {
	// FailureStateList asks for a list of the failures that should begin, continue or stop.
	FailureStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (FailureStatus_FailureStateListClient, error)
	// GetFailure asks for a failure.
	GetFailure(ctx context.Context, in *FailureId, opts ...grpc.CallOption) (*Failure, error)
}

type failureStatusClient struct {
	cc *grpc.ClientConn
}

func NewFailureStatusClient(cc *grpc.ClientConn) FailureStatusClient {
	return &failureStatusClient{cc}
}

func (c *failureStatusClient) FailureStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (FailureStatus_FailureStateListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FailureStatus_serviceDesc.Streams[0], c.cc, "/failure.FailureStatus/FailureStateList", opts...)
	if err != nil {
		return nil, err
	}
	x := &failureStatusFailureStateListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FailureStatus_FailureStateListClient interface {
	Recv() (*FailuresState, error)
	grpc.ClientStream
}

type failureStatusFailureStateListClient struct {
	grpc.ClientStream
}

func (x *failureStatusFailureStateListClient) Recv() (*FailuresState, error) {
	m := new(FailuresState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *failureStatusClient) GetFailure(ctx context.Context, in *FailureId, opts ...grpc.CallOption) (*Failure, error) {
	out := new(Failure)
	err := grpc.Invoke(ctx, "/failure.FailureStatus/GetFailure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FailureStatus service

type FailureStatusServer interface {
	// FailureStateList asks for a list of the failures that should begin, continue or stop.
	FailureStateList(*NodeId, FailureStatus_FailureStateListServer) error
	// GetFailure asks for a failure.
	GetFailure(context.Context, *FailureId) (*Failure, error)
}

func RegisterFailureStatusServer(s *grpc.Server, srv FailureStatusServer) {
	s.RegisterService(&_FailureStatus_serviceDesc, srv)
}

func _FailureStatus_FailureStateList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FailureStatusServer).FailureStateList(m, &failureStatusFailureStateListServer{stream})
}

type FailureStatus_FailureStateListServer interface {
	Send(*FailuresState) error
	grpc.ServerStream
}

type failureStatusFailureStateListServer struct {
	grpc.ServerStream
}

func (x *failureStatusFailureStateListServer) Send(m *FailuresState) error {
	return x.ServerStream.SendMsg(m)
}

func _FailureStatus_GetFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailureId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FailureStatusServer).GetFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/failure.FailureStatus/GetFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FailureStatusServer).GetFailure(ctx, req.(*FailureId))
	}
	return interceptor(ctx, in, info, handler)
}

var _FailureStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "failure.FailureStatus",
	HandlerType: (*FailureStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFailure",
			Handler:    _FailureStatus_GetFailure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FailureStateList",
			Handler:       _FailureStatus_FailureStateList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "failurestatus/failurestatus.proto",
}

func (m *NodeId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *FailureId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailureId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.NodeID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	if len(m.Definition) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(len(m.Definition)))
		i += copy(dAtA[i:], m.Definition)
	}
	if m.CurrentState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(m.CurrentState))
	}
	if m.ExpectedState != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFailurestatus(dAtA, i, uint64(m.ExpectedState))
	}
	return i, nil
}

func (m *FailuresState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailuresState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Failures) > 0 {
		for _, msg := range m.Failures {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFailurestatus(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintFailurestatus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeId) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFailurestatus(uint64(l))
	}
	return n
}

func (m *FailureId) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFailurestatus(uint64(l))
	}
	return n
}

func (m *Failure) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFailurestatus(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovFailurestatus(uint64(l))
	}
	l = len(m.Definition)
	if l > 0 {
		n += 1 + l + sovFailurestatus(uint64(l))
	}
	if m.CurrentState != 0 {
		n += 1 + sovFailurestatus(uint64(m.CurrentState))
	}
	if m.ExpectedState != 0 {
		n += 1 + sovFailurestatus(uint64(m.ExpectedState))
	}
	return n
}

func (m *FailuresState) Size() (n int) {
	var l int
	_ = l
	if len(m.Failures) > 0 {
		for _, e := range m.Failures {
			l = e.Size()
			n += 1 + l + sovFailurestatus(uint64(l))
		}
	}
	return n
}

func sovFailurestatus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFailurestatus(x uint64) (n int) {
	return sovFailurestatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailurestatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailurestatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailurestatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFailurestatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailureId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailurestatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailureId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailureId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailurestatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailurestatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFailurestatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailurestatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailurestatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailurestatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailurestatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentState", wireType)
			}
			m.CurrentState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentState |= (State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedState", wireType)
			}
			m.ExpectedState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedState |= (State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFailurestatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFailurestatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailuresState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailurestatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailuresState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailuresState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFailurestatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failures = append(m.Failures, &Failure{})
			if err := m.Failures[len(m.Failures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailurestatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFailurestatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFailurestatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFailurestatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFailurestatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFailurestatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFailurestatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFailurestatus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFailurestatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFailurestatus   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("failurestatus/failurestatus.proto", fileDescriptorFailurestatus) }

var fileDescriptorFailurestatus = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0xaa, 0xd3, 0x40,
	0x14, 0xbe, 0x93, 0xde, 0x24, 0x37, 0xe7, 0x36, 0x71, 0x1c, 0xb0, 0x84, 0x0a, 0xa1, 0x76, 0x55,
	0x44, 0xaa, 0xa4, 0xb8, 0xec, 0xa2, 0x35, 0x63, 0x09, 0x96, 0x14, 0x26, 0xad, 0xba, 0x2b, 0xb5,
	0x99, 0x42, 0x40, 0x92, 0x92, 0x4c, 0xc1, 0x85, 0x2b, 0x9f, 0xc2, 0x97, 0x71, 0xef, 0xd2, 0x47,
	0x90, 0xfa, 0x22, 0x92, 0xc9, 0x34, 0xd6, 0xde, 0x2e, 0xbf, 0xbf, 0xc3, 0x37, 0xe7, 0x0c, 0x3c,
	0xdb, 0x6d, 0xd2, 0xcf, 0x87, 0x82, 0x97, 0x62, 0x23, 0x0e, 0xe5, 0xcb, 0xff, 0xd0, 0x70, 0x5f,
	0xe4, 0x22, 0x27, 0xa6, 0x22, 0xfb, 0x2e, 0x18, 0x51, 0x9e, 0xf0, 0x30, 0x21, 0x0e, 0x68, 0x69,
	0xe2, 0xa2, 0x1e, 0x1a, 0x58, 0x4c, 0x4b, 0x93, 0xfe, 0x53, 0xb0, 0xde, 0xd6, 0xa6, 0x2b, 0xe2,
	0x0f, 0x04, 0xa6, 0x52, 0x2f, 0x35, 0xd2, 0x01, 0x23, 0xab, 0x46, 0x06, 0xae, 0x26, 0x39, 0x85,
	0x88, 0x07, 0x90, 0xf0, 0x5d, 0x9a, 0xa5, 0x22, 0xcd, 0x33, 0xb7, 0x25, 0xb5, 0x33, 0x86, 0x8c,
	0xc0, 0xde, 0x1e, 0x8a, 0x82, 0x67, 0x62, 0x5d, 0x75, 0xe5, 0xee, 0x6d, 0x0f, 0x0d, 0x1c, 0xdf,
	0x19, 0xaa, 0xae, 0xc3, 0xb8, 0x62, 0x59, 0x5b, 0x99, 0x24, 0x22, 0xaf, 0xc1, 0xe1, 0x5f, 0xf6,
	0x7c, 0x2b, 0x78, 0xa2, 0x52, 0xfa, 0xd5, 0x94, 0x7d, 0x72, 0x49, 0xd8, 0x1f, 0x83, 0xad, 0xea,
	0x97, 0xf5, 0x9c, 0x17, 0x70, 0x77, 0xda, 0x93, 0x8b, 0x7a, 0xad, 0xc1, 0xbd, 0x8f, 0x9b, 0x09,
	0xca, 0xc9, 0x1a, 0xc7, 0xf3, 0xaf, 0xa0, 0xd7, 0xb1, 0x7b, 0x30, 0x57, 0xd1, 0xbb, 0x68, 0xf1,
	0x21, 0xc2, 0x37, 0x15, 0xa0, 0xd1, 0x64, 0x3a, 0xa7, 0x01, 0x46, 0xc4, 0x06, 0x8b, 0x7e, 0xa4,
	0x6f, 0x56, 0xcb, 0x30, 0x9a, 0x61, 0xad, 0x82, 0x8c, 0xbe, 0xa7, 0x4c, 0xc2, 0x16, 0x69, 0xc3,
	0x5d, 0x10, 0xc6, 0xb5, 0xf7, 0x56, 0x06, 0x19, 0x5b, 0x30, 0x1a, 0x60, 0x9d, 0x3c, 0x81, 0xc7,
	0x0a, 0xac, 0xff, 0x25, 0x0c, 0x62, 0x81, 0x1e, 0x2f, 0x27, 0x73, 0x8a, 0x4d, 0xff, 0x1b, 0x6a,
	0xda, 0xc7, 0xf2, 0xa8, 0x64, 0x0c, 0xf8, 0x8c, 0xe0, 0xf3, 0xb4, 0x14, 0xe4, 0x51, 0xd3, 0xbf,
	0x3e, 0x70, 0xb7, 0x73, 0xf9, 0xa0, 0xfa, 0xe9, 0xaf, 0x10, 0xf1, 0x01, 0x66, 0x5c, 0x9c, 0xee,
	0x49, 0x2e, 0x7d, 0x61, 0xd2, 0x7d, 0xb0, 0x8c, 0x29, 0xfe, 0x79, 0xf4, 0xd0, 0xaf, 0xa3, 0x87,
	0x7e, 0x1f, 0x3d, 0xf4, 0xfd, 0x8f, 0x77, 0xf3, 0xc9, 0x90, 0x5f, 0x6b, 0xf4, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x94, 0xcd, 0x42, 0x6e, 0x7f, 0x02, 0x00, 0x00,
}
