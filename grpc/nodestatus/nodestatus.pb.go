// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nodestatus/nodestatus.proto

/*
Package github_com_slok_ragnarok_grpc_nodestatus is a generated protocol buffer package.

It is generated from these files:
	nodestatus/nodestatus.proto

It has these top-level messages:
*/
package github_com_slok_ragnarok_grpc_nodestatus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import github_com_slok_ragnarok_api_cluster_v1_pb "github.com/slok/ragnarok/api/cluster/v1/pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeStatus service

type NodeStatusClient interface {
	// Register registers a node.
	Register(ctx context.Context, in *github_com_slok_ragnarok_api_cluster_v1_pb.Node, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Heartbeat sends the current status of the node and receives
	// the expected status that should have.
	Heartbeat(ctx context.Context, in *github_com_slok_ragnarok_api_cluster_v1_pb.Node, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type nodeStatusClient struct {
	cc *grpc.ClientConn
}

func NewNodeStatusClient(cc *grpc.ClientConn) NodeStatusClient {
	return &nodeStatusClient{cc}
}

func (c *nodeStatusClient) Register(ctx context.Context, in *github_com_slok_ragnarok_api_cluster_v1_pb.Node, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/github.com.slok.ragnarok.grpc.nodestatus.NodeStatus/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeStatusClient) Heartbeat(ctx context.Context, in *github_com_slok_ragnarok_api_cluster_v1_pb.Node, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/github.com.slok.ragnarok.grpc.nodestatus.NodeStatus/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeStatus service

type NodeStatusServer interface {
	// Register registers a node.
	Register(context.Context, *github_com_slok_ragnarok_api_cluster_v1_pb.Node) (*google_protobuf.Empty, error)
	// Heartbeat sends the current status of the node and receives
	// the expected status that should have.
	Heartbeat(context.Context, *github_com_slok_ragnarok_api_cluster_v1_pb.Node) (*google_protobuf.Empty, error)
}

func RegisterNodeStatusServer(s *grpc.Server, srv NodeStatusServer) {
	s.RegisterService(&_NodeStatus_serviceDesc, srv)
}

func _NodeStatus_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_slok_ragnarok_api_cluster_v1_pb.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStatusServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.slok.ragnarok.grpc.nodestatus.NodeStatus/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStatusServer).Register(ctx, req.(*github_com_slok_ragnarok_api_cluster_v1_pb.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeStatus_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(github_com_slok_ragnarok_api_cluster_v1_pb.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStatusServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.slok.ragnarok.grpc.nodestatus.NodeStatus/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStatusServer).Heartbeat(ctx, req.(*github_com_slok_ragnarok_api_cluster_v1_pb.Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.slok.ragnarok.grpc.nodestatus.NodeStatus",
	HandlerType: (*NodeStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NodeStatus_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _NodeStatus_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodestatus/nodestatus.proto",
}

func init() { proto.RegisterFile("nodestatus/nodestatus.proto", fileDescriptorNodestatus) }

var fileDescriptorNodestatus = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xce, 0x3d, 0x4e, 0x03, 0x31,
	0x10, 0x86, 0x61, 0xb6, 0x41, 0xe0, 0x0a, 0x6d, 0x41, 0xb1, 0x91, 0x5c, 0x53, 0xcd, 0x10, 0x10,
	0x17, 0x40, 0x42, 0xa2, 0xa2, 0xe0, 0xe7, 0x00, 0xf6, 0x66, 0x30, 0x56, 0x36, 0x19, 0xcb, 0x1e,
	0x47, 0xe2, 0x26, 0x5c, 0x85, 0x1b, 0x50, 0x72, 0x04, 0xb4, 0x5c, 0x04, 0xd9, 0x4b, 0xb4, 0x15,
	0x1d, 0x9d, 0x8b, 0x6f, 0x1e, 0xbf, 0x6a, 0xb1, 0xe5, 0x15, 0x25, 0x31, 0x92, 0x13, 0xce, 0x4f,
	0x08, 0x91, 0x85, 0xdb, 0x33, 0xe7, 0xe5, 0x25, 0x5b, 0xe8, 0x79, 0x03, 0x69, 0xe0, 0x35, 0x44,
	0xe3, 0xb6, 0x26, 0xf2, 0x1a, 0x5c, 0x0c, 0x3d, 0xcc, 0xfb, 0x6e, 0xe1, 0x98, 0xdd, 0x40, 0x58,
	0xef, 0x6c, 0x7e, 0x46, 0xda, 0x04, 0x79, 0x9d, 0x98, 0xee, 0x6a, 0x66, 0xb0, 0x30, 0xb8, 0x67,
	0xd0, 0x04, 0x8f, 0xfd, 0x90, 0x93, 0x50, 0xc4, 0xdd, 0x12, 0x83, 0xad, 0x0d, 0xd3, 0xd9, 0xc5,
	0x7b, 0xa3, 0xd4, 0x1d, 0xaf, 0xe8, 0xa1, 0x7e, 0xd1, 0x3e, 0xaa, 0xa3, 0x7b, 0x72, 0xbe, 0x6c,
	0xdb, 0x73, 0xf8, 0xb3, 0xcc, 0x04, 0x0f, 0xbf, 0x24, 0xec, 0x96, 0x10, 0x2c, 0x14, 0xa3, 0x3b,
	0x85, 0xa9, 0x10, 0xf6, 0x85, 0x70, 0x53, 0x0a, 0xdb, 0x27, 0x75, 0x7c, 0x4b, 0x26, 0x8a, 0x25,
	0x23, 0xff, 0xc7, 0x5e, 0x9f, 0x7c, 0x8c, 0xba, 0xf9, 0x1c, 0x75, 0xf3, 0x35, 0xea, 0xe6, 0xed,
	0x5b, 0x1f, 0xd8, 0xc3, 0xba, 0xb8, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x39, 0xd6, 0x45,
	0x71, 0x01, 0x00, 0x00,
}
