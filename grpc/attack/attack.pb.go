// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attack/attack.proto

/*
Package attack is a generated protocol buffer package.

It is generated from these files:
	attack/attack.proto

It has these top-level messages:
	NodeId
	Attack
	AttacksExpectedState
*/
package attack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeId is a node id
type NodeId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NodeId) Reset()                    { *m = NodeId{} }
func (m *NodeId) String() string            { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()               {}
func (*NodeId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Attack represents an attack
type Attack struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Definition string `protobuf:"bytes,3,opt,name=definition" json:"definition,omitempty"`
}

func (m *Attack) Reset()                    { *m = Attack{} }
func (m *Attack) String() string            { return proto.CompactTextString(m) }
func (*Attack) ProtoMessage()               {}
func (*Attack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Attack) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Attack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attack) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

// SttackStateResponse reprensents the state of the attacks
type AttacksExpectedState struct {
	RunningAttackId  []string `protobuf:"bytes,1,rep,name=running_attack_id,json=runningAttackId" json:"running_attack_id,omitempty"`
	RevertedAttackId []string `protobuf:"bytes,2,rep,name=reverted_attack_id,json=revertedAttackId" json:"reverted_attack_id,omitempty"`
}

func (m *AttacksExpectedState) Reset()                    { *m = AttacksExpectedState{} }
func (m *AttacksExpectedState) String() string            { return proto.CompactTextString(m) }
func (*AttacksExpectedState) ProtoMessage()               {}
func (*AttacksExpectedState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AttacksExpectedState) GetRunningAttackId() []string {
	if m != nil {
		return m.RunningAttackId
	}
	return nil
}

func (m *AttacksExpectedState) GetRevertedAttackId() []string {
	if m != nil {
		return m.RevertedAttackId
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeId)(nil), "attack.NodeId")
	proto.RegisterType((*Attack)(nil), "attack.Attack")
	proto.RegisterType((*AttacksExpectedState)(nil), "attack.AttacksExpectedState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AttackState service

type AttackStateClient interface {
	// AttackStateList asks for a list of the attacks that should begin, continue or stop
	AttackStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (AttackState_AttackStateListClient, error)
}

type attackStateClient struct {
	cc *grpc.ClientConn
}

func NewAttackStateClient(cc *grpc.ClientConn) AttackStateClient {
	return &attackStateClient{cc}
}

func (c *attackStateClient) AttackStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (AttackState_AttackStateListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AttackState_serviceDesc.Streams[0], c.cc, "/attack.AttackState/AttackStateList", opts...)
	if err != nil {
		return nil, err
	}
	x := &attackStateAttackStateListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AttackState_AttackStateListClient interface {
	Recv() (*AttacksExpectedState, error)
	grpc.ClientStream
}

type attackStateAttackStateListClient struct {
	grpc.ClientStream
}

func (x *attackStateAttackStateListClient) Recv() (*AttacksExpectedState, error) {
	m := new(AttacksExpectedState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AttackState service

type AttackStateServer interface {
	// AttackStateList asks for a list of the attacks that should begin, continue or stop
	AttackStateList(*NodeId, AttackState_AttackStateListServer) error
}

func RegisterAttackStateServer(s *grpc.Server, srv AttackStateServer) {
	s.RegisterService(&_AttackState_serviceDesc, srv)
}

func _AttackState_AttackStateList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AttackStateServer).AttackStateList(m, &attackStateAttackStateListServer{stream})
}

type AttackState_AttackStateListServer interface {
	Send(*AttacksExpectedState) error
	grpc.ServerStream
}

type attackStateAttackStateListServer struct {
	grpc.ServerStream
}

func (x *attackStateAttackStateListServer) Send(m *AttacksExpectedState) error {
	return x.ServerStream.SendMsg(m)
}

var _AttackState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "attack.AttackState",
	HandlerType: (*AttackStateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttackStateList",
			Handler:       _AttackState_AttackStateList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "attack/attack.proto",
}

func init() { proto.RegisterFile("attack/attack.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0x54, 0x02, 0x1d, 0xa1, 0xd5, 0xd1, 0x43, 0x10, 0x11, 0xd9, 0x53, 0x11, 0xa9,
	0xa2, 0x4f, 0xd0, 0x83, 0x87, 0x42, 0x11, 0xa9, 0x0f, 0xb0, 0xc4, 0x9d, 0x51, 0x82, 0x98, 0x2c,
	0xd9, 0x51, 0x7c, 0x7c, 0x21, 0xb3, 0x0b, 0x8b, 0xf4, 0x94, 0xf9, 0xe7, 0xff, 0x32, 0x33, 0xfc,
	0x70, 0xe6, 0x45, 0x7c, 0xfb, 0x79, 0xa7, 0xcf, 0xba, 0xcb, 0x49, 0x12, 0x5a, 0x55, 0xb5, 0x03,
	0xfb, 0x9c, 0x88, 0xb7, 0x84, 0x0b, 0x30, 0x81, 0x5c, 0x75, 0x5d, 0xad, 0xe6, 0x7b, 0x13, 0xa8,
	0xde, 0x81, 0xdd, 0x14, 0xe6, 0xbf, 0x83, 0x08, 0x47, 0xd1, 0x7f, 0xb1, 0x33, 0xa5, 0x53, 0x6a,
	0xbc, 0x02, 0x20, 0x7e, 0x0f, 0x31, 0x48, 0x48, 0xd1, 0xcd, 0x8a, 0x33, 0xe9, 0xd4, 0x1d, 0x9c,
	0xeb, 0xb4, 0xfe, 0xe9, 0xb7, 0xe3, 0x56, 0x98, 0x5e, 0xc5, 0x0b, 0xe3, 0x0d, 0x9c, 0xe6, 0xef,
	0x18, 0x43, 0xfc, 0x68, 0xf4, 0xa2, 0xa6, 0xac, 0x9a, 0xad, 0xe6, 0xfb, 0xe5, 0x60, 0xe8, 0xbf,
	0x2d, 0xe1, 0x2d, 0x60, 0xe6, 0x1f, 0xce, 0xc2, 0x34, 0x81, 0x4d, 0x81, 0x4f, 0x46, 0x67, 0xa4,
	0x1f, 0x5e, 0xe0, 0x58, 0x6b, 0x5d, 0xb4, 0x81, 0xe5, 0x44, 0xee, 0x42, 0x2f, 0xb8, 0x58, 0x0f,
	0x91, 0x68, 0x02, 0x17, 0x97, 0xa3, 0x3e, 0x74, 0xe9, 0x7d, 0xf5, 0x66, 0x4b, 0x74, 0x8f, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x7d, 0x7d, 0x55, 0x51, 0x01, 0x00, 0x00,
}
