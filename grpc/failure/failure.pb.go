// Code generated by protoc-gen-go. DO NOT EDIT.
// source: failure/failure.proto

/*
Package failure is a generated protocol buffer package.

It is generated from these files:
	failure/failure.proto

It has these top-level messages:
	NodeId
	Failure
	FailuresExpectedState
*/
package failure

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeId is a node id
type NodeId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NodeId) Reset()                    { *m = NodeId{} }
func (m *NodeId) String() string            { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()               {}
func (*NodeId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Failure represents an failure
type Failure struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Definition string `protobuf:"bytes,3,opt,name=definition" json:"definition,omitempty"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (m *Failure) String() string            { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Failure) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Failure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Failure) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

// FailuresExpectedState reprensents the state of the failures
type FailuresExpectedState struct {
	RunningFailureId  []string `protobuf:"bytes,1,rep,name=running_failure_id,json=runningFailureId" json:"running_failure_id,omitempty"`
	RevertedFailureId []string `protobuf:"bytes,2,rep,name=reverted_failure_id,json=revertedFailureId" json:"reverted_failure_id,omitempty"`
}

func (m *FailuresExpectedState) Reset()                    { *m = FailuresExpectedState{} }
func (m *FailuresExpectedState) String() string            { return proto.CompactTextString(m) }
func (*FailuresExpectedState) ProtoMessage()               {}
func (*FailuresExpectedState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FailuresExpectedState) GetRunningFailureId() []string {
	if m != nil {
		return m.RunningFailureId
	}
	return nil
}

func (m *FailuresExpectedState) GetRevertedFailureId() []string {
	if m != nil {
		return m.RevertedFailureId
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeId)(nil), "failure.NodeId")
	proto.RegisterType((*Failure)(nil), "failure.Failure")
	proto.RegisterType((*FailuresExpectedState)(nil), "failure.FailuresExpectedState")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FailureState service

type FailureStateClient interface {
	// FailureStateList asks for a list of the failures that should begin, continue or stop
	FailureStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (FailureState_FailureStateListClient, error)
}

type failureStateClient struct {
	cc *grpc.ClientConn
}

func NewFailureStateClient(cc *grpc.ClientConn) FailureStateClient {
	return &failureStateClient{cc}
}

func (c *failureStateClient) FailureStateList(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (FailureState_FailureStateListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FailureState_serviceDesc.Streams[0], c.cc, "/failure.FailureState/FailureStateList", opts...)
	if err != nil {
		return nil, err
	}
	x := &failureStateFailureStateListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FailureState_FailureStateListClient interface {
	Recv() (*FailuresExpectedState, error)
	grpc.ClientStream
}

type failureStateFailureStateListClient struct {
	grpc.ClientStream
}

func (x *failureStateFailureStateListClient) Recv() (*FailuresExpectedState, error) {
	m := new(FailuresExpectedState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FailureState service

type FailureStateServer interface {
	// FailureStateList asks for a list of the failures that should begin, continue or stop
	FailureStateList(*NodeId, FailureState_FailureStateListServer) error
}

func RegisterFailureStateServer(s *grpc.Server, srv FailureStateServer) {
	s.RegisterService(&_FailureState_serviceDesc, srv)
}

func _FailureState_FailureStateList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FailureStateServer).FailureStateList(m, &failureStateFailureStateListServer{stream})
}

type FailureState_FailureStateListServer interface {
	Send(*FailuresExpectedState) error
	grpc.ServerStream
}

type failureStateFailureStateListServer struct {
	grpc.ServerStream
}

func (x *failureStateFailureStateListServer) Send(m *FailuresExpectedState) error {
	return x.ServerStream.SendMsg(m)
}

var _FailureState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "failure.FailureState",
	HandlerType: (*FailureStateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FailureStateList",
			Handler:       _FailureState_FailureStateList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "failure/failure.proto",
}

func init() { proto.RegisterFile("failure/failure.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x69, 0x56, 0x76, 0xd9, 0x41, 0x74, 0x1d, 0x59, 0x08, 0x1e, 0x16, 0xe9, 0xa9, 0x07,
	0xa9, 0xa2, 0xbf, 0xa1, 0x42, 0x41, 0x3d, 0x54, 0x3c, 0x97, 0xea, 0x4c, 0x65, 0x40, 0x93, 0x92,
	0xa6, 0xe2, 0xcf, 0x17, 0xd2, 0xb4, 0x14, 0xd9, 0x53, 0xf2, 0xde, 0xfb, 0x92, 0x19, 0x1e, 0xec,
	0xdb, 0x46, 0xbe, 0x06, 0xc7, 0xb7, 0xf1, 0xcc, 0x3b, 0x67, 0xbd, 0xc5, 0x4d, 0x94, 0xa9, 0x86,
	0xf5, 0x8b, 0x25, 0x2e, 0x09, 0xcf, 0x40, 0x09, 0xe9, 0xe4, 0x3a, 0xc9, 0xb6, 0x95, 0x12, 0x4a,
	0x9f, 0x61, 0xf3, 0x38, 0x42, 0xff, 0x23, 0x44, 0x38, 0x31, 0xcd, 0x37, 0x6b, 0x15, 0x9c, 0x70,
	0xc7, 0x03, 0x00, 0x71, 0x2b, 0x46, 0xbc, 0x58, 0xa3, 0x57, 0x21, 0x59, 0x38, 0xe9, 0x00, 0xfb,
	0xf8, 0x5d, 0x5f, 0xfc, 0x76, 0xfc, 0xe1, 0x99, 0x5e, 0x7d, 0xe3, 0x19, 0x6f, 0x00, 0xdd, 0x60,
	0x8c, 0x98, 0xcf, 0x3a, 0x2e, 0x55, 0x87, 0x61, 0xab, 0x6c, 0x5b, 0xed, 0x62, 0x12, 0x5f, 0x96,
	0x84, 0x39, 0x5c, 0x3a, 0xfe, 0x61, 0xe7, 0x99, 0x96, 0xb8, 0x0a, 0xf8, 0xc5, 0x14, 0xcd, 0xfc,
	0xfd, 0x1b, 0x9c, 0x46, 0x31, 0x4e, 0x2b, 0x60, 0xb7, 0xd4, 0x4f, 0xd2, 0x7b, 0x3c, 0xcf, 0xa7,
	0x72, 0xc6, 0x2a, 0xae, 0x0e, 0xb3, 0x71, 0x74, 0xe5, 0xbb, 0xe4, 0x7d, 0x1d, 0x6a, 0x7c, 0xf8,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x90, 0xe1, 0x18, 0x63, 0x5f, 0x01, 0x00, 0x00,
}
